#include <GL/glut.h>
#include <iostream>
#include <cmath>
using namespace std;

int x_start, y_start, x_end, y_end;
int algorithm = 1;  // 1 = DDA, 2 = Bresenham
int style = 1;      // 1 = Simple, 2 = Dashed, 3 = Dotted, 4 = Solid

void plot(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void ddaLine() {
    float dx = x_end - x_start;
    float dy = y_end - y_start;
    int steps = max(abs(dx), abs(dy));
    float x_inc = dx / steps;
    float y_inc = dy / steps;
    float x = x_start;
    float y = y_start;

    for (int i = 0; i <= steps; i++) {
        bool draw = false;
        if (style == 1) draw = true;                      // Simple
        else if (style == 2 && (i / 5) % 2 == 0) draw = true;  // Dashed
        else if (style == 3 && i % 5 == 0) draw = true;        // Dotted
        else if (style == 4) draw = true;                  // Solid

        if (draw) plot(round(x), round(y));
        x += x_inc;
        y += y_inc;
    }
}

void bresenhamLine() {
    int x = x_start, y = y_start;
    int dx = abs(x_end - x_start);
    int dy = abs(y_end - y_start);
    int sx = (x_start < x_end) ? 1 : -1;
    int sy = (y_start < y_end) ? 1 : -1;
    int err = dx - dy;
    int count = 0;

    while (true) {
        bool draw = false;
        if (style == 1) draw = true;                      // Simple
        else if (style == 2 && (count / 5) % 2 == 0) draw = true;  // Dashed
        else if (style == 3 && count % 5 == 0) draw = true;        // Dotted
        else if (style == 4) draw = true;                  // Solid

        if (draw) plot(x, y);

        if (x == x_end && y == y_end) break;

        int e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x += sx;
        }
        if (e2 < dx) {
            err += dx;
            y += sy;
        }
        count++;
    }
}

void drawAxes() {
    glColor3f(0, 0, 0);  // Black axes
    glBegin(GL_LINES);
    glVertex2i(-500, 0); glVertex2i(500, 0);  // X-axis
    glVertex2i(0, -500); glVertex2i(0, 500);  // Y-axis
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawAxes();
    glColor3f(1, 0, 0);  // Red line
    if (algorithm == 1)
        ddaLine();
    else
        bresenhamLine();
    glFlush();
}

void init() {
    glClearColor(1, 1, 1, 1);              // White background
    glColor3f(0, 0, 0);                    // Default drawing color
    gluOrtho2D(-500, 500, -500, 500);     // World coordinates for 4 quadrants
}

int main(int argc, char** argv) {
    cout << "Enter starting coordinates (x y): ";
    cin >> x_start >> y_start;
    cout << "Enter ending coordinates (x y): ";
    cin >> x_end >> y_end;
    cout << "Choose algorithm:\n1. DDA\n2. Bresenham\nYour choice: ";
    cin >> algorithm;
    cout << "Choose line style:\n1. Simple\n2. Dashed\n3. Dotted\n4. Solid\nYour choice: ";
    cin >> style;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Line Drawing (Keyboard + Input)");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
//g++ k.cpp -lGL -lGLU -lglut
//./a.out