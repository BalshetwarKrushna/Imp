#include <iostream>
#include <math.h>
#include <GL/glut.h>

using namespace std;

// ------------------- Variables -------------------
int choice = 0;

// For Bezier Curve
int bx[4], by[4];

// For Koch Curve
double kx, ky, len, angle;
int it;

// ------------------- OpenGL Initialization -------------------
void init() {
    glClearColor(1.0, 1.0, 1.0, 0.0); // white background
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 640, 0, 480);       // coordinate system
    glClear(GL_COLOR_BUFFER_BIT);     // clear screen
}

// ------------------- Draw Point (used in Bezier) -------------------
void putpixel(double xt, double yt) {
    glColor3f(1, 0, 0); // red
    glBegin(GL_POINTS);
    glVertex2d(xt, yt);
    glEnd();
    glFlush();
}

// ------------------- Bezier Curve Drawing -------------------
void bezierCurve() {
    // Draw control polygon
    glColor3f(0, 1, 0); // green
    glBegin(GL_LINES);
    glVertex2i(bx[0], by[0]); glVertex2i(bx[1], by[1]);
    glVertex2i(bx[1], by[1]); glVertex2i(bx[2], by[2]);
    glVertex2i(bx[2], by[2]); glVertex2i(bx[3], by[3]);
    glEnd();
    glFlush();

    // Draw curve using Bezier equation
    double t;
    for (t = 0.0; t <= 1.0; t += 0.0005) {
        double xt = pow(1 - t, 3) * bx[0] + 3 * t * pow(1 - t, 2) * bx[1] +
                    3 * pow(t, 2) * (1 - t) * bx[2] + pow(t, 3) * bx[3];
        double yt = pow(1 - t, 3) * by[0] + 3 * t * pow(1 - t, 2) * by[1] +
                    3 * pow(t, 2) * (1 - t) * by[2] + pow(t, 3) * by[3];
        putpixel(xt, yt);
    }
}

// ------------------- Koch Line Drawing -------------------
void line1(int x1, int y1, int x2, int y2) {
    glColor3f(0, 1, 0); // green
    glBegin(GL_LINES);
    glVertex2i(x1, y1);
    glVertex2i(x2, y2);
    glEnd();
    glFlush();
}

// Recursive Koch Curve
void k_curve(double x, double y, double len, double angle, int it) {
    if (it > 0) {
        len /= 3;
        k_curve(x, y, len, angle, it - 1);
        x += (len * cosl(angle * M_PI / 180));
        y += (len * sinl(angle * M_PI / 180));

        k_curve(x, y, len, angle + 60, it - 1);
        x += (len * cosl((angle + 60) * M_PI / 180));
        y += (len * sinl((angle + 60) * M_PI / 180));

        k_curve(x, y, len, angle - 60, it - 1);
        x += (len * cosl((angle - 60) * M_PI / 180));
        y += (len * sinl((angle - 60) * M_PI / 180));

        k_curve(x, y, len, angle, it - 1);
    } else {
        int x2 = (int)(x + len * cosl(angle * M_PI / 180) + 0.5);
        int y2 = (int)(y + len * sinl(angle * M_PI / 180) + 0.5);
        line1((int)x, (int)y, x2, y2);
    }
}

// ------------------- Display Function -------------------
void display() {
    if (choice == 1) {
        bezierCurve();
    } else if (choice == 2) {
        k_curve(kx, ky, len, angle, it);
    }
}

// ------------------- Main Function -------------------
int main(int argc, char** argv) {
    cout << "\nChoose an option:\n";
    cout << "1. Bezier Curve (4 Control Points)\n";
    cout << "2. Koch Curve (Fractal Line)\n";
    cout << "Enter choice: ";
    cin >> choice;

    if (choice == 1) {
        cout << "\nEnter the 4 control points (x y):\n";
        for (int i = 0; i < 4; i++) {
            cout << "Point " << i << ": ";
            cin >> bx[i] >> by[i];
        }
    } else if (choice == 2) {
        cout << "\nEnter starting point (x y): ";
        cin >> kx >> ky;
        cout << "Enter length of line and angle: ";
        cin >> len >> angle;
        cout << "Enter number of iterations: ";
        cin >> it;
    } else {
        cout << "Invalid choice.\n";
        return 1;
    }

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(200, 200);

    if (choice == 1)
        glutCreateWindow("Bezier Curve");
    else
        glutCreateWindow("Koch Curve");

    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

Enter the 4 control points:
Point 0: 100 100
Point 1: 150 300
Point 2: 300 300
Point 3: 400 100

Enter starting point: 100 200
Enter length and angle: 400 0
Enter number of iterations: 3

//g++ yaa.cpp -lGL -lGLU -lglut
//./a.out
